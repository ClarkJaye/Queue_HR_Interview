// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Queue.DataAccess;

#nullable disable

namespace Queue.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240531061859_update_applicant_status")]
    partial class update_applicant_status
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Queue.Models.Applicant_Form", b =>
                {
                    b.Property<int>("ApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantId");

                    b.ToTable("Applicant_Form");
                });

            modelBuilder.Entity("Queue.Models.Applicant_Status", b =>
                {
                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("Stage1_Table")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stage2_Table")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stage3_Table")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stage_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stage_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stage_3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantId");

                    b.ToTable("Applicant_Status");
                });

            modelBuilder.Entity("Queue.Models.Queue_Stage_1", b =>
                {
                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Generated_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TemporaryRejected_At")
                        .HasColumnType("datetime2(7)");

                    b.HasKey("ApplicantId", "StatusId");

                    b.HasIndex("StageId");

                    b.HasIndex("StatusId");

                    b.ToTable("Queue_Stage_1");
                });

            modelBuilder.Entity("Queue.Models.Queue_Stage_2", b =>
                {
                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Generated_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TemporaryRejected_At")
                        .HasColumnType("datetime2(7)");

                    b.HasKey("ApplicantId", "StatusId");

                    b.HasIndex("StageId");

                    b.HasIndex("StatusId");

                    b.ToTable("Queue_Stage_2");
                });

            modelBuilder.Entity("Queue.Models.Queue_Stage_3", b =>
                {
                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Generated_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TemporaryRejected_At")
                        .HasColumnType("datetime2(7)");

                    b.HasKey("ApplicantId", "StatusId");

                    b.HasIndex("StageId");

                    b.HasIndex("StatusId");

                    b.ToTable("Queue_Stage_3");
                });

            modelBuilder.Entity("Queue.Models.Queue_Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Queue_Status");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "waiting"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "temp_reject"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "rejected"
                        });
                });

            modelBuilder.Entity("Queue.Models.Serving", b =>
                {
                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Served_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("TableId", "ApplicantId", "StageId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("StageId");

                    b.ToTable("Serving");
                });

            modelBuilder.Entity("Queue.Models.Stage", b =>
                {
                    b.Property<int>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StageId"));

                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StageId");

                    b.ToTable("Stage");

                    b.HasData(
                        new
                        {
                            StageId = 1,
                            StageName = "Pre-Screening - (Ground Floor)"
                        },
                        new
                        {
                            StageId = 2,
                            StageName = "Initial Interviewing - (Third Floor)"
                        },
                        new
                        {
                            StageId = 3,
                            StageName = "Final Interviewing - (Second Floor)"
                        });
                });

            modelBuilder.Entity("Queue.Models.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"));

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TableId");

                    b.HasIndex("StageId");

                    b.ToTable("Table");

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            StageId = 1,
                            Username = "Table 1"
                        },
                        new
                        {
                            TableId = 2,
                            StageId = 1,
                            Username = "Table 2"
                        },
                        new
                        {
                            TableId = 3,
                            StageId = 1,
                            Username = "Table 3"
                        },
                        new
                        {
                            TableId = 4,
                            StageId = 1,
                            Username = "Table 4"
                        },
                        new
                        {
                            TableId = 5,
                            StageId = 1,
                            Username = "Table 5"
                        },
                        new
                        {
                            TableId = 6,
                            StageId = 2,
                            Username = "Table 1"
                        },
                        new
                        {
                            TableId = 7,
                            StageId = 2,
                            Username = "Table 2"
                        },
                        new
                        {
                            TableId = 8,
                            StageId = 2,
                            Username = "Table 3"
                        },
                        new
                        {
                            TableId = 9,
                            StageId = 2,
                            Username = "Table 4"
                        },
                        new
                        {
                            TableId = 10,
                            StageId = 2,
                            Username = "Table 5"
                        },
                        new
                        {
                            TableId = 11,
                            StageId = 2,
                            Username = "Table 6"
                        },
                        new
                        {
                            TableId = 12,
                            StageId = 2,
                            Username = "Table 7"
                        },
                        new
                        {
                            TableId = 13,
                            StageId = 2,
                            Username = "Table 8"
                        },
                        new
                        {
                            TableId = 14,
                            StageId = 2,
                            Username = "Table 9"
                        },
                        new
                        {
                            TableId = 15,
                            StageId = 2,
                            Username = "Table 10"
                        },
                        new
                        {
                            TableId = 16,
                            StageId = 2,
                            Username = "Table 11"
                        },
                        new
                        {
                            TableId = 17,
                            StageId = 2,
                            Username = "Table 12"
                        },
                        new
                        {
                            TableId = 18,
                            StageId = 3,
                            Username = "HUMILITY"
                        },
                        new
                        {
                            TableId = 19,
                            StageId = 3,
                            Username = "OPENNESS"
                        },
                        new
                        {
                            TableId = 20,
                            StageId = 3,
                            Username = "OWNER'S MINDSET"
                        },
                        new
                        {
                            TableId = 21,
                            StageId = 3,
                            Username = "TRANSPARENCY"
                        },
                        new
                        {
                            TableId = 22,
                            StageId = 3,
                            Username = "UNITY AND LUCIA"
                        });
                });

            modelBuilder.Entity("Queue.Models.Table_Serve", b =>
                {
                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Served_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("TotalFailed")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPassed")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPooled")
                        .HasColumnType("int");

                    b.HasKey("TableId");

                    b.ToTable("Table_Serve");
                });

            modelBuilder.Entity("Queue.Models.Applicant_Status", b =>
                {
                    b.HasOne("Queue.Models.Applicant_Form", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("Queue.Models.Queue_Stage_1", b =>
                {
                    b.HasOne("Queue.Models.Applicant_Form", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Queue.Models.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Queue.Models.Queue_Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Stage");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Queue.Models.Queue_Stage_2", b =>
                {
                    b.HasOne("Queue.Models.Applicant_Form", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Queue.Models.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Queue.Models.Queue_Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Stage");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Queue.Models.Queue_Stage_3", b =>
                {
                    b.HasOne("Queue.Models.Applicant_Form", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Queue.Models.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Queue.Models.Queue_Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Stage");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Queue.Models.Serving", b =>
                {
                    b.HasOne("Queue.Models.Applicant_Form", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Queue.Models.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Queue.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Stage");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Queue.Models.Table", b =>
                {
                    b.HasOne("Queue.Models.Stage", "Stage")
                        .WithMany("tables")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Queue.Models.Table_Serve", b =>
                {
                    b.HasOne("Queue.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Queue.Models.Stage", b =>
                {
                    b.Navigation("tables");
                });
#pragma warning restore 612, 618
        }
    }
}
